#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π Sanic Payment API
"""

import requests
import json
import hashlib
import time

# –ë–∞–∑–æ–≤—ã–π URL API
BASE_URL = "http://localhost:8000"
API_BASE = f"{BASE_URL}/api/v1"

def test_health_check():
    """–¢–µ—Å—Ç health check —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üè• –¢–µ—Å—Ç–∏—Ä—É—é Health Check...")
    
    # –¢–µ—Å—Ç –∫–æ—Ä–Ω–µ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    response = requests.get(f"{BASE_URL}/")
    print(f"GET / -> {response.status_code}: {response.json()}")
    
    # –¢–µ—Å—Ç health —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    response = requests.get(f"{BASE_URL}/health")
    print(f"GET /health -> {response.status_code}: {response.json()}")
    
    print("‚úÖ Health Check —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")

def test_authentication():
    """–¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–æ–≤"""
    print("üîê –¢–µ—Å—Ç–∏—Ä—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é...")
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ë–î)
    user_login_data = {
        "email": "test@example.com",
        "password": "testpassword"
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/login", json=user_login_data)
        print(f"POST /auth/login (user) -> {response.status_code}: {response.text[:100]}...")
    except Exception as e:
        print(f"POST /auth/login (user) -> Error: {e}")
    
    # –¢–µ—Å—Ç –ª–æ–≥–∏–Ω–∞ –∞–¥–º–∏–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å –æ—à–∏–±–∫—É –ë–î)
    admin_login_data = {
        "email": "admin@example.com", 
        "password": "adminpassword"
    }
    
    try:
        response = requests.post(f"{API_BASE}/auth/admin/login", json=admin_login_data)
        print(f"POST /auth/admin/login -> {response.status_code}: {response.text[:100]}...")
    except Exception as e:
        print(f"POST /auth/admin/login -> Error: {e}")
    
    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã (–æ–∂–∏–¥–∞–µ–º—ã –æ—à–∏–±–∫–∏ –ë–î)\n")

def test_user_endpoints():
    """–¢–µ—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üë§ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
    endpoints = [
        "/user/profile",
        "/user/accounts", 
        "/user/payments"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{API_BASE}{endpoint}")
            print(f"GET {endpoint} (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞) -> {response.status_code}: {response.text[:100]}...")
        except Exception as e:
            print(f"GET {endpoint} -> Error: {e}")
    
    print("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")

def test_admin_endpoints():
    """–¢–µ—Å—Ç –∞–¥–º–∏–Ω—Å–∫–∏—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤"""
    print("üë®‚Äçüíº –¢–µ—Å—Ç–∏—Ä—É—é –∞–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã...")
    
    # –¢–µ—Å—Ç –±–µ–∑ —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å 401)
    endpoints = [
        "/admin/profile",
        "/admin/users"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"{API_BASE}{endpoint}")
            print(f"GET {endpoint} (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞) -> {response.status_code}: {response.text[:100]}...")
        except Exception as e:
            print(f"GET {endpoint} -> Error: {e}")
    
    print("‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")

def calculate_webhook_signature(data, secret="gfdmhghif38yrf9ew0jkf32"):
    """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∏ webhook"""
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –∏ –∫–æ–Ω–∫–∞—Ç–µ–Ω–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è
    sorted_data = {k: data[k] for k in sorted(data.keys()) if k != 'signature'}
    string_to_sign = ''.join(str(sorted_data[key]) for key in sorted(sorted_data.keys())) + secret
    
    return hashlib.sha256(string_to_sign.encode()).hexdigest()

def test_webhook():
    """–¢–µ—Å—Ç webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
    print("üîó –¢–µ—Å—Ç–∏—Ä—É—é webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç...")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
    webhook_data = {
        "transaction_id": "test-transaction-123",
        "user_id": 1,
        "account_id": 1,
        "amount": 100.50
    }
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å
    signature = calculate_webhook_signature(webhook_data)
    webhook_data["signature"] = signature
    
    print(f"–î–∞–Ω–Ω—ã–µ webhook: {webhook_data}")
    print(f"–í—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å—å: {signature}")
    
    try:
        response = requests.post(f"{API_BASE}/webhook/payment", json=webhook_data)
        print(f"POST /webhook/payment -> {response.status_code}: {response.text[:200]}...")
    except Exception as e:
        print(f"POST /webhook/payment -> Error: {e}")
    
    print("‚úÖ Webhook —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")

def test_openapi():
    """–¢–µ—Å—Ç OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    print("üìö –¢–µ—Å—Ç–∏—Ä—É—é OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é...")
    
    try:
        response = requests.get(f"{BASE_URL}/docs/openapi.json")
        if response.status_code == 200:
            openapi_spec = response.json()
            print(f"OpenAPI spec –∑–∞–≥—Ä—É–∂–µ–Ω: {len(openapi_spec.get('paths', {}))} —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
            paths = list(openapi_spec.get('paths', {}).keys())[:5]
            print(f"–ü—Ä–∏–º–µ—Ä—ã —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤: {paths}")
        else:
            print(f"OpenAPI spec -> {response.status_code}")
    except Exception as e:
        print(f"OpenAPI spec -> Error: {e}")
    
    print("‚úÖ OpenAPI —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã\n")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Sanic Payment API")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
    try:
        response = requests.get(f"{BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...\n")
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
            return
    except Exception as e:
        print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    test_health_check()
    test_authentication()
    test_user_endpoints()
    test_admin_endpoints() 
    test_webhook()
    test_openapi()
    
    print("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("=" * 60)
    print("üìù –°–≤–æ–¥–∫–∞:")
    print("‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("‚úÖ Health check —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã")
    print("‚úÖ API –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
    print("‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã")
    print("‚úÖ Webhook –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ")
    print("‚úÖ OpenAPI –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞")
    print("\n‚ö†Ô∏è  –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ PostgreSQL")

if __name__ == "__main__":
    main()
